# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-04-21 22:10
from __future__ import unicode_literals

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import tickle.common.db.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('modifiers', '0001_initial'),
        ('events', '0002_auto_20160422_0010'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchased', models.DateTimeField(blank=True, null=True, verbose_name='purchased')),
                ('main_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carts', to='events.MainEvent', verbose_name='main event')),
                ('modifiers', models.ManyToManyField(blank=True, related_name='carts', to='modifiers.Modifier', verbose_name='modifiers')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carts', to=settings.AUTH_USER_MODEL, verbose_name='person')),
            ],
            options={
                'verbose_name': 'cart',
                'verbose_name_plural': 'carts',
            },
        ),
        migrations.CreateModel(
            name='Holding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='quantity')),
                ('utilized', models.DateTimeField(blank=True, null=True, verbose_name='utilized')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='products.Cart', verbose_name='cart')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to=settings.AUTH_USER_MODEL, verbose_name='person')),
            ],
            options={
                'verbose_name': 'holding',
                'verbose_name_plural': 'holdings',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', tickle.common.db.fields.NameField(max_length=64, verbose_name='name')),
                ('slug', tickle.common.db.fields.SlugField(max_length=64, verbose_name='slug')),
                ('description', tickle.common.db.fields.DescriptionField(blank=True, verbose_name='description')),
                ('price', tickle.common.db.fields.MoneyField(decimal_places=2, max_digits=12, verbose_name='price')),
                ('published', models.BooleanField(default=True, verbose_name='published')),
                ('personal_limit', models.PositiveIntegerField(blank=True, default=1, help_text='Blank means no limit.', null=True, verbose_name='personal limit')),
                ('total_limit', models.PositiveIntegerField(blank=True, help_text='Blank means no limit.', null=True, verbose_name='total limit')),
                ('transferable', models.BooleanField(default=True, help_text='If people should be able to transfer this product to other people.', verbose_name='transferable')),
                ('main_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='events.MainEvent', verbose_name='main event')),
                ('modifiers', models.ManyToManyField(related_name='products', to='modifiers.Modifier', verbose_name='modifiers')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'product',
                'verbose_name_plural': 'products',
            },
        ),
        migrations.CreateModel(
            name='ProductVariation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', tickle.common.db.fields.NameField(max_length=64, verbose_name='name')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variations', to='products.Product', verbose_name='product')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'product variation',
                'verbose_name_plural': 'product variations',
            },
        ),
        migrations.CreateModel(
            name='ProductVariationChoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', tickle.common.db.fields.NameField(max_length=64, verbose_name='name')),
                ('order', models.PositiveIntegerField(verbose_name='order')),
                ('delta_amount', tickle.common.db.fields.MoneyField(decimal_places=2, default=Decimal('0'), help_text='For discount, enter a negative value.', max_digits=12, verbose_name='delta (amount)')),
                ('variation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='products.ProductVariation', verbose_name='product variation')),
            ],
            options={
                'ordering': ['order'],
                'verbose_name': 'product variation choice',
                'verbose_name_plural': 'product variation choices',
            },
        ),
        migrations.AddField(
            model_name='holding',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='products.Product', verbose_name='product'),
        ),
        migrations.AddField(
            model_name='holding',
            name='product_variation_choices',
            field=models.ManyToManyField(related_name='holdings', to='products.ProductVariationChoice', verbose_name='product variation choices'),
        ),
        migrations.AlterUniqueTogether(
            name='productvariationchoice',
            unique_together=set([('name', 'variation')]),
        ),
        migrations.AlterUniqueTogether(
            name='productvariation',
            unique_together=set([('name', 'product')]),
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together=set([('main_event', 'name'), ('main_event', 'slug')]),
        ),
    ]
